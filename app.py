{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":517,"status":"ok","timestamp":1729913324027,"user":{"displayName":"Piyush","userId":"03357721134807350636"},"user_tz":-330},"id":"HaTlGxODARXZ","outputId":"23e24388-68ac-42ea-eea8-5c2e3e7ecb6c"},"outputs":[{"name":"stderr","output_type":"stream","text":["2024-10-26 03:28:44.629 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.631 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.633 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.635 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.637 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.639 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.641 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.642 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.643 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.644 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.645 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.646 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.647 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.648 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.653 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.654 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.665 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n","2024-10-26 03:28:44.666 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"]}],"source":["import streamlit as st\n","import streamlit.components.v1 as components\n","from pathlib import Path\n","import base64\n","import json\n","\n","def load_html_template():\n","    \"\"\"Load the HTML template and inject necessary modifications for Streamlit\"\"\"\n","    html_content = \"\"\"\n","    <!DOCTYPE html>\n","    <html lang=\"en\">\n","    <head>\n","        <meta charset=\"UTF-8\">\n","        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n","        <title>Procurement Analysis - Schneider Electric</title>\n","        <link href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css\" rel=\"stylesheet\">\n","        <link href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\" rel=\"stylesheet\">\n","        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js\"></script>\n","        <style>\n","            /* Your existing styles here */\n","            :root {\n","                --schneider-green: #3DCD58;\n","                --schneider-dark: #1A1A1A;\n","            }\n","\n","            body {\n","                background-color: var(--schneider-dark);\n","                color: #ffffff;\n","            }\n","\n","            .se-gradient {\n","                background: linear-gradient(135deg, #3DCD58 0%, #2A8E3C 100%);\n","            }\n","\n","            .glow-effect {\n","                box-shadow: 0 0 15px rgba(61, 205, 88, 0.3);\n","                transition: all 0.3s ease;\n","            }\n","\n","            .glow-effect:hover {\n","                box-shadow: 0 0 30px rgba(61, 205, 88, 0.5);\n","            }\n","\n","            .se-card {\n","                background: rgba(26, 26, 26, 0.95);\n","                border: 1px solid rgba(61, 205, 88, 0.2);\n","                backdrop-filter: blur(10px);\n","            }\n","        </style>\n","    </head>\n","    <body class=\"min-h-screen\">\n","        <div id=\"content\">\n","            <!-- Analysis Type Selection -->\n","            <div class=\"container mx-auto px-4 py-8\">\n","                <div class=\"se-card rounded-xl p-8 glow-effect w-full max-w-3xl mx-auto\">\n","                    <h2 class=\"text-3xl font-bold mb-8 text-[#3DCD58]\">Open PO Analysis</h2>\n","                    <form id=\"uploadForm\">\n","                        <div class=\"space-y-8\">\n","                            <!-- File Upload Section -->\n","                            <div class=\"border-2 border-dashed border-[#3DCD58]/30 rounded-xl p-10 text-center\">\n","                                <div class=\"space-y-6\">\n","                                    <div class=\"mx-auto h-20 w-20 text-[#3DCD58]/60\">\n","                                        <svg fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n","                                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n","                                                  d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"/>\n","                                        </svg>\n","                                    </div>\n","                                    <div class=\"text-gray-300 text-xl\">\n","                                        Upload required files:\n","                                    </div>\n","                                    <div class=\"text-gray-500 text-lg\">\n","                                        1. Open PO Report (.xlsx, .csv)<br>\n","                                        2. Workbench File (.xlsx, .csv)\n","                                    </div>\n","                                </div>\n","                            </div>\n","                        </div>\n","                    </form>\n","                </div>\n","            </div>\n","        </div>\n","\n","        <script>\n","            // Handle communication with Streamlit\n","            function sendToStreamlit(data) {\n","                window.parent.postMessage({type: 'streamlit', data: data}, '*');\n","            }\n","        </script>\n","    </body>\n","    </html>\n","    \"\"\"\n","    return html_content\n","\n","def main():\n","    st.set_page_config(\n","        page_title=\"Procurement Analysis\",\n","        layout=\"wide\",\n","        initial_sidebar_state=\"collapsed\"\n","    )\n","\n","    # Inject custom CSS to hide Streamlit elements\n","    st.markdown(\"\"\"\n","        <style>\n","            #MainMenu {visibility: hidden;}\n","            header {visibility: hidden;}\n","            footer {visibility: hidden;}\n","            .stApp {\n","                margin-top: -80px;\n","            }\n","        </style>\n","    \"\"\", unsafe_allow_html=True)\n","\n","    # Render HTML template\n","    components.html(load_html_template(), height=800, scrolling=False)\n","\n","    # File upload section (Streamlit native)\n","    col1, col2 = st.columns(2)\n","\n","    with col1:\n","        po_file = st.file_uploader(\"Upload Open PO Report\", type=['xlsx', 'csv'], key='po_file')\n","\n","    with col2:\n","        workbench_file = st.file_uploader(\"Upload Workbench File\", type=['xlsx', 'csv'], key='wb_file')\n","\n","    if po_file and workbench_file:\n","        if st.button(\"Process Files\"):\n","            # Here you'll integrate your custom Open PO analysis logic\n","            with st.spinner(\"Processing files...\"):\n","                try:\n","                     # Filter Open_PO_BEF for LINE_TYPE = Inventory\n","                      Open_PO_BEF = Open_PO_BEF[Open_PO_BEF['LINE_TYPE'] == 'Inventory']\n","                      # Merge Open_PO_BEF and WB on 'ITEM' and 'VENDOR_NUM'\n","                      merged_df = pd.merge(WB,Open_PO_BEF,left_on=['PART_NUMBER', 'VENDOR_NUM'], right_on=['ITEM', 'VENDOR_NUM'], how='inner')\n","                      merged_df.columns = merged_df.columns.str.strip()\n","                      # Drop the 'Item' column\n","                      merged_df = merged_df.drop('ITEM', axis=1)\n","\n","                      # Rename columns\n","                      merged_df = merged_df.rename(columns={\n","                          'DANDB': 'VENDOR_DUNS',\n","                          'UNIT_PRICE_x': 'Unit_Price_WB',\n","                          'CURRENCY_CODE': 'CURRENCY_CODE_WB',\n","                          'UNIT_PRICE_y': 'UNIT_PRICE_OPO',\n","                          'CURRNECY': 'CURRNECY_OPO'\n","                      })\n","\n","                      # Reorder columns\n","                      new_column_order = ['ORDER_TYPE', 'PART_NUMBER', 'ASL_MPN', 'DESCRIPTION', 'VENDOR_NAME', 'VENDOR_DUNS', 'VENDOR_NUM', 'STARS Category Code', 'PO_NUM', 'RELEASE_NUM', 'LINE_NUM', 'SHIPMENT_NUM', 'AUTHORIZATION_STATUS', 'PO_SHIPMENT_CREATION_DATE', 'QTY_ELIGIBLE_TO_SHIP', 'Unit_Price_WB', 'CURRENCY_CODE_WB', 'UNIT_PRICE_OPO', 'CURRNECY_OPO']\n","                      merged_df = merged_df[new_column_order]\n","                      # Drop Dublicates\n","                      merged_df = merged_df.drop_duplicates()\n","                      #IG/OG Column\n","                      # Insert a new column named 'IG/OG' at index 8\n","                      merged_df.insert(8, 'IG/OG', '')\n","\n","                      # Define a function to map Vendor to IG/OG based on Vendor Name\n","                      def map_vendor_to_ig_og(vendor_name):\n","                        if 'SCHNEIDER' in vendor_name or 'WUXI' in vendor_name:\n","                          return 'IG'\n","                        else:\n","                          return 'OG'\n","\n","                      # Apply the function to the 'VENDOR_NAME' column to populate the 'IG/OG' column\n","                      merged_df['IG/OG'] = merged_df['VENDOR_NAME'].apply(map_vendor_to_ig_og)\n","                      # PO Year\n","                      merged_df.insert(14, 'PO Year', pd.to_datetime(merged_df['PO_SHIPMENT_CREATION_DATE']).dt.year)\n","                      # Prices in Euros\n","                      # Create a dictionary to store the latest conversion rates (replace with your actual rates)\n","                      conversion_rates = {\n","                          'USD': 0.93,  # Example: USD to EUR rate\n","                          'GBP': 1.2,  # Example: GBP to EUR rate\n","                          'INR': 0.011,\n","                          'JPY': 0.0061\n","                      }\n","\n","\n","                      def convert_to_euro(price, currency):\n","                        \"\"\"Converts a price to Euros based on the provided currency.\"\"\"\n","                        if currency in conversion_rates:\n","                          return price * conversion_rates[currency]\n","                        else:\n","                          return None  # Or handle unknown currencies as needed\n","\n","\n","                      # Apply the conversion function to the 'Unit_Price_WB' and 'UNIT_PRICE_OPO' columns\n","                      merged_df['UNIT_PRICE_WB_EUR'] = merged_df.apply(\n","                          lambda row: convert_to_euro(row['Unit_Price_WB'], row['CURRENCY_CODE_WB']), axis=1\n","                      )\n","\n","                      merged_df['UNIT_PRICE_OPO_EUR'] = merged_df.apply(\n","                          lambda row: convert_to_euro(row['UNIT_PRICE_OPO'], row['CURRNECY_OPO']), axis=1\n","                      )\n","                      # Calculate Price_Delta\n","                      merged_df['Price_Delta'] = merged_df['UNIT_PRICE_OPO_EUR'] - merged_df['UNIT_PRICE_WB_EUR']\n","\n","                      # Calculate Impact in Euros\n","                      merged_df['Impact in Euros'] = merged_df['Price_Delta'] * merged_df['QTY_ELIGIBLE_TO_SHIP']\n","\n","                      # Calculate Open PO Value\n","                      merged_df['Open PO Value'] = merged_df['QTY_ELIGIBLE_TO_SHIP'] * merged_df['UNIT_PRICE_OPO_EUR']\n","                      #Sort the data\n","                      merged_df = merged_df.sort_values('Impact in Euros', ascending=False)\n","                      st.success(\"Files processed successfully!\")\n","\n","                    # Display results section\n","                      st.markdown(\"### Analysis Results\")\n","                    # Add your visualization and results display code here\n","\n","                except Exception as e:\n","                    st.error(f\"Error processing files: {str(e)}\")\n","\n","if __name__ == \"__main__\":\n","    main()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WE8TaGLa2iY2"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP3q4tlAUdRZH34KeRi9AUL"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}